{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\offic\\\\OneDrive\\\\Documents\\\\GitHub\\\\Mini_Project\\\\project\\\\src\\\\LoginContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the Modal context\nexport const useModal = () => {\n  _s();\n  return useContext(LoginContext);\n};\n\n// Modal provider to wrap around components that need access to the modal state\n_s(useModal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ModalProvider = ({\n  children\n}) => {\n  _s2();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [keyword, setKeyword] = useState('React'); // Set the keyword value here\n\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: {\n      isModalOpen,\n      openModal,\n      closeModal,\n      keyword,\n      setKeyword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s2(ModalProvider, \"ub4ngwFimoFxm2sNMTi7rr2038k=\");\n_c = ModalProvider;\nvar _c;\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","LoginContext","useModal","_s","ModalProvider","children","_s2","isModalOpen","setIsModalOpen","keyword","setKeyword","openModal","closeModal","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/offic/OneDrive/Documents/GitHub/Mini_Project/project/src/LoginContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Create a context\r\nconst LoginContext = createContext();\r\n\r\n// Custom hook to use the Modal context\r\nexport const useModal = () => useContext(LoginContext);\r\n\r\n// Modal provider to wrap around components that need access to the modal state\r\nexport const ModalProvider = ({ children }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [keyword, setKeyword] = useState('React'); // Set the keyword value here\r\n\r\n  const openModal = () => setIsModalOpen(true);\r\n  const closeModal = () => setIsModalOpen(false);\r\n  \r\n  return (\r\n    <LoginContext.Provider value={{ isModalOpen, openModal, closeModal, keyword, setKeyword }}>\r\n      {children}\r\n    </LoginContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMM,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,YAAY,CAAC;AAAA;;AAEtD;AAAAE,EAAA,CAFaD,QAAQ;AAGrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEjD,MAAMa,SAAS,GAAGA,CAAA,KAAMH,cAAc,CAAC,IAAI,CAAC;EAC5C,MAAMI,UAAU,GAAGA,CAAA,KAAMJ,cAAc,CAAC,KAAK,CAAC;EAE9C,oBACER,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAEP,WAAW;MAAEI,SAAS;MAAEC,UAAU;MAAEH,OAAO;MAAEC;IAAW,CAAE;IAAAL,QAAA,EACvFA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACZ,GAAA,CAZWF,aAAa;AAAAe,EAAA,GAAbf,aAAa;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}